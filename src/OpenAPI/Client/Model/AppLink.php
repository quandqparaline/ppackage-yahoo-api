<?php
/**
 * AppLink
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppLink Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;AppLinkオブジェクトは、アプリリンク情報を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;AppLink information.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppLink implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AppLink';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'app_link_id' => 'int',
        'app_vendor_id' => 'string',
        'app_vendor_name_ja' => 'string',
        'app_vendor_name_en' => 'string',
        'app_id' => 'string',
        'app_link_platform' => '\OpenAPI\Client\Model\AppLinkServiceAppLinkPlatform',
        'link_id' => 'string',
        'link_status' => '\OpenAPI\Client\Model\AppLinkServiceLinkStatus',
        'sync_status' => '\OpenAPI\Client\Model\AppLinkServiceSyncStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'app_link_id' => 'int64',
        'app_vendor_id' => null,
        'app_vendor_name_ja' => null,
        'app_vendor_name_en' => null,
        'app_id' => null,
        'app_link_platform' => null,
        'link_id' => null,
        'link_status' => null,
        'sync_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'app_link_id' => true,
		'app_vendor_id' => true,
		'app_vendor_name_ja' => true,
		'app_vendor_name_en' => true,
		'app_id' => true,
		'app_link_platform' => true,
		'link_id' => true,
		'link_status' => true,
		'sync_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'app_link_id' => 'appLinkId',
        'app_vendor_id' => 'appVendorId',
        'app_vendor_name_ja' => 'appVendorNameJa',
        'app_vendor_name_en' => 'appVendorNameEn',
        'app_id' => 'appId',
        'app_link_platform' => 'appLinkPlatform',
        'link_id' => 'linkId',
        'link_status' => 'linkStatus',
        'sync_status' => 'syncStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'app_link_id' => 'setAppLinkId',
        'app_vendor_id' => 'setAppVendorId',
        'app_vendor_name_ja' => 'setAppVendorNameJa',
        'app_vendor_name_en' => 'setAppVendorNameEn',
        'app_id' => 'setAppId',
        'app_link_platform' => 'setAppLinkPlatform',
        'link_id' => 'setLinkId',
        'link_status' => 'setLinkStatus',
        'sync_status' => 'setSyncStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'app_link_id' => 'getAppLinkId',
        'app_vendor_id' => 'getAppVendorId',
        'app_vendor_name_ja' => 'getAppVendorNameJa',
        'app_vendor_name_en' => 'getAppVendorNameEn',
        'app_id' => 'getAppId',
        'app_link_platform' => 'getAppLinkPlatform',
        'link_id' => 'getLinkId',
        'link_status' => 'getLinkStatus',
        'sync_status' => 'getSyncStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('app_link_id', $data ?? [], null);
        $this->setIfExists('app_vendor_id', $data ?? [], null);
        $this->setIfExists('app_vendor_name_ja', $data ?? [], null);
        $this->setIfExists('app_vendor_name_en', $data ?? [], null);
        $this->setIfExists('app_id', $data ?? [], null);
        $this->setIfExists('app_link_platform', $data ?? [], null);
        $this->setIfExists('link_id', $data ?? [], null);
        $this->setIfExists('link_status', $data ?? [], null);
        $this->setIfExists('sync_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets app_link_id
     *
     * @return int|null
     */
    public function getAppLinkId()
    {
        return $this->container['app_link_id'];
    }

    /**
     * Sets app_link_id
     *
     * @param int|null $app_link_id <div lang=\"ja\">アプリリンクIDです。<br> SETまたはREGENERATE時、このフィールドは必須となります。</div> <div lang=\"en\">App Link ID.<br> This field is required in SET or REGENERATE operation.</div>
     *
     * @return self
     */
    public function setAppLinkId($app_link_id)
    {

        if (is_null($app_link_id)) {
            array_push($this->openAPINullablesSetToNull, 'app_link_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_link_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_link_id'] = $app_link_id;

        return $this;
    }

    /**
     * Gets app_vendor_id
     *
     * @return string|null
     */
    public function getAppVendorId()
    {
        return $this->container['app_vendor_id'];
    }

    /**
     * Sets app_vendor_id
     *
     * @param string|null $app_vendor_id <div lang=\"ja\">アプリ計測ベンダーIDです。<br> ADD時、このフィールドは必須となります。<br> ※DictionaryService/getAppLinkVendorで取得できるappVendorIdのみ使用できます。</div> <div lang=\"en\">App Vendor ID.<br> This field is required in ADD operation.<br> *Only the appVendorId that can be obtained with DictionaryService/getAppLinkVendor can be used.</div>
     *
     * @return self
     */
    public function setAppVendorId($app_vendor_id)
    {

        if (is_null($app_vendor_id)) {
            array_push($this->openAPINullablesSetToNull, 'app_vendor_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_vendor_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_vendor_id'] = $app_vendor_id;

        return $this;
    }

    /**
     * Gets app_vendor_name_ja
     *
     * @return string|null
     */
    public function getAppVendorNameJa()
    {
        return $this->container['app_vendor_name_ja'];
    }

    /**
     * Sets app_vendor_name_ja
     *
     * @param string|null $app_vendor_name_ja <div lang=\"ja\">アプリ計測ベンダー名（日本語）です。</div> <div lang=\"en\">App Vendor Name in Japanese.</div>
     *
     * @return self
     */
    public function setAppVendorNameJa($app_vendor_name_ja)
    {

        if (is_null($app_vendor_name_ja)) {
            array_push($this->openAPINullablesSetToNull, 'app_vendor_name_ja');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_vendor_name_ja', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_vendor_name_ja'] = $app_vendor_name_ja;

        return $this;
    }

    /**
     * Gets app_vendor_name_en
     *
     * @return string|null
     */
    public function getAppVendorNameEn()
    {
        return $this->container['app_vendor_name_en'];
    }

    /**
     * Sets app_vendor_name_en
     *
     * @param string|null $app_vendor_name_en <div lang=\"ja\">アプリ計測ベンダー名（英語）です。</div> <div lang=\"en\">App Vendor Name in English.</div>
     *
     * @return self
     */
    public function setAppVendorNameEn($app_vendor_name_en)
    {

        if (is_null($app_vendor_name_en)) {
            array_push($this->openAPINullablesSetToNull, 'app_vendor_name_en');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_vendor_name_en', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_vendor_name_en'] = $app_vendor_name_en;

        return $this;
    }

    /**
     * Gets app_id
     *
     * @return string|null
     */
    public function getAppId()
    {
        return $this->container['app_id'];
    }

    /**
     * Sets app_id
     *
     * @param string|null $app_id <div lang=\"ja\">アプリIDです。<br> ADD時、このフィールドは必須となります。</div> <div lang=\"en\">App ID.<br> This field is required in ADD operation.</div>
     *
     * @return self
     */
    public function setAppId($app_id)
    {

        if (is_null($app_id)) {
            array_push($this->openAPINullablesSetToNull, 'app_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_id'] = $app_id;

        return $this;
    }

    /**
     * Gets app_link_platform
     *
     * @return \OpenAPI\Client\Model\AppLinkServiceAppLinkPlatform|null
     */
    public function getAppLinkPlatform()
    {
        return $this->container['app_link_platform'];
    }

    /**
     * Sets app_link_platform
     *
     * @param \OpenAPI\Client\Model\AppLinkServiceAppLinkPlatform|null $app_link_platform app_link_platform
     *
     * @return self
     */
    public function setAppLinkPlatform($app_link_platform)
    {

        if (is_null($app_link_platform)) {
            array_push($this->openAPINullablesSetToNull, 'app_link_platform');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_link_platform', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_link_platform'] = $app_link_platform;

        return $this;
    }

    /**
     * Gets link_id
     *
     * @return string|null
     */
    public function getLinkId()
    {
        return $this->container['link_id'];
    }

    /**
     * Sets link_id
     *
     * @param string|null $link_id <div lang=\"ja\">リンクIDです。</div> <div lang=\"en\">Link ID.</div>
     *
     * @return self
     */
    public function setLinkId($link_id)
    {

        if (is_null($link_id)) {
            array_push($this->openAPINullablesSetToNull, 'link_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['link_id'] = $link_id;

        return $this;
    }

    /**
     * Gets link_status
     *
     * @return \OpenAPI\Client\Model\AppLinkServiceLinkStatus|null
     */
    public function getLinkStatus()
    {
        return $this->container['link_status'];
    }

    /**
     * Sets link_status
     *
     * @param \OpenAPI\Client\Model\AppLinkServiceLinkStatus|null $link_status link_status
     *
     * @return self
     */
    public function setLinkStatus($link_status)
    {

        if (is_null($link_status)) {
            array_push($this->openAPINullablesSetToNull, 'link_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('link_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['link_status'] = $link_status;

        return $this;
    }

    /**
     * Gets sync_status
     *
     * @return \OpenAPI\Client\Model\AppLinkServiceSyncStatus|null
     */
    public function getSyncStatus()
    {
        return $this->container['sync_status'];
    }

    /**
     * Sets sync_status
     *
     * @param \OpenAPI\Client\Model\AppLinkServiceSyncStatus|null $sync_status sync_status
     *
     * @return self
     */
    public function setSyncStatus($sync_status)
    {

        if (is_null($sync_status)) {
            array_push($this->openAPINullablesSetToNull, 'sync_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sync_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sync_status'] = $sync_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


