<?php
/**
 * AccountManagement
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountManagement Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;AccountManagementオブジェクトは、アカウント情報を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;AccountManagement object serves account information.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountManagement implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountManagement';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'account_name' => 'string',
        'account_payment' => '\OpenAPI\Client\Model\AccountManagementServicePayment',
        'agency_person_name' => 'string',
        'agency_prefecture_code' => '\OpenAPI\Client\Model\AccountManagementServicePrefectureCode',
        'auth_type' => '\OpenAPI\Client\Model\AccountManagementServiceAuthType',
        'auto_tagging_enabled' => '\OpenAPI\Client\Model\AccountManagementServiceAutoTaggingEnabled',
        'client' => '\OpenAPI\Client\Model\AccountManagementServiceClient',
        'client_type' => '\OpenAPI\Client\Model\AccountManagementServiceClientType',
        'contact_biz_id' => 'string',
        'delivery_status' => '\OpenAPI\Client\Model\AccountManagementServiceDeliveryStatus',
        'is_adult_account' => '\OpenAPI\Client\Model\AccountManagementServiceIsAdultAccount',
        'is_test_account' => '\OpenAPI\Client\Model\AccountManagementServiceIsTestAccount',
        'status' => '\OpenAPI\Client\Model\AccountManagementServiceStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'account_name' => null,
        'account_payment' => null,
        'agency_person_name' => null,
        'agency_prefecture_code' => null,
        'auth_type' => null,
        'auto_tagging_enabled' => null,
        'client' => null,
        'client_type' => null,
        'contact_biz_id' => null,
        'delivery_status' => null,
        'is_adult_account' => null,
        'is_test_account' => null,
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'account_name' => true,
		'account_payment' => true,
		'agency_person_name' => true,
		'agency_prefecture_code' => true,
		'auth_type' => true,
		'auto_tagging_enabled' => true,
		'client' => true,
		'client_type' => true,
		'contact_biz_id' => true,
		'delivery_status' => true,
		'is_adult_account' => true,
		'is_test_account' => true,
		'status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'account_name' => 'accountName',
        'account_payment' => 'accountPayment',
        'agency_person_name' => 'agencyPersonName',
        'agency_prefecture_code' => 'agencyPrefectureCode',
        'auth_type' => 'authType',
        'auto_tagging_enabled' => 'autoTaggingEnabled',
        'client' => 'client',
        'client_type' => 'clientType',
        'contact_biz_id' => 'contactBizId',
        'delivery_status' => 'deliveryStatus',
        'is_adult_account' => 'isAdultAccount',
        'is_test_account' => 'isTestAccount',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'account_name' => 'setAccountName',
        'account_payment' => 'setAccountPayment',
        'agency_person_name' => 'setAgencyPersonName',
        'agency_prefecture_code' => 'setAgencyPrefectureCode',
        'auth_type' => 'setAuthType',
        'auto_tagging_enabled' => 'setAutoTaggingEnabled',
        'client' => 'setClient',
        'client_type' => 'setClientType',
        'contact_biz_id' => 'setContactBizId',
        'delivery_status' => 'setDeliveryStatus',
        'is_adult_account' => 'setIsAdultAccount',
        'is_test_account' => 'setIsTestAccount',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'account_name' => 'getAccountName',
        'account_payment' => 'getAccountPayment',
        'agency_person_name' => 'getAgencyPersonName',
        'agency_prefecture_code' => 'getAgencyPrefectureCode',
        'auth_type' => 'getAuthType',
        'auto_tagging_enabled' => 'getAutoTaggingEnabled',
        'client' => 'getClient',
        'client_type' => 'getClientType',
        'contact_biz_id' => 'getContactBizId',
        'delivery_status' => 'getDeliveryStatus',
        'is_adult_account' => 'getIsAdultAccount',
        'is_test_account' => 'getIsTestAccount',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('account_name', $data ?? [], null);
        $this->setIfExists('account_payment', $data ?? [], null);
        $this->setIfExists('agency_person_name', $data ?? [], null);
        $this->setIfExists('agency_prefecture_code', $data ?? [], null);
        $this->setIfExists('auth_type', $data ?? [], null);
        $this->setIfExists('auto_tagging_enabled', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('client_type', $data ?? [], null);
        $this->setIfExists('contact_biz_id', $data ?? [], null);
        $this->setIfExists('delivery_status', $data ?? [], null);
        $this->setIfExists('is_adult_account', $data ?? [], null);
        $this->setIfExists('is_test_account', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Account ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name <div lang=\"ja\">アカウント名です。<br> このフィールドは、ADD時は必須となり、SET時は省略可能となります。</div> <div lang=\"en\">Account Name.<br> This field is required in ADD operation, and will be optional in SET operation.</div>
     *
     * @return self
     */
    public function setAccountName($account_name)
    {

        if (is_null($account_name)) {
            array_push($this->openAPINullablesSetToNull, 'account_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_payment
     *
     * @return \OpenAPI\Client\Model\AccountManagementServicePayment|null
     */
    public function getAccountPayment()
    {
        return $this->container['account_payment'];
    }

    /**
     * Sets account_payment
     *
     * @param \OpenAPI\Client\Model\AccountManagementServicePayment|null $account_payment account_payment
     *
     * @return self
     */
    public function setAccountPayment($account_payment)
    {

        if (is_null($account_payment)) {
            array_push($this->openAPINullablesSetToNull, 'account_payment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_payment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_payment'] = $account_payment;

        return $this;
    }

    /**
     * Gets agency_person_name
     *
     * @return string|null
     */
    public function getAgencyPersonName()
    {
        return $this->container['agency_person_name'];
    }

    /**
     * Sets agency_person_name
     *
     * @param string|null $agency_person_name <div lang=\"ja\">代理店担当者名です。<br> ADDおよびSET時、このフィールドは省略可能となります。</div> <div lang=\"en\">Agency Person Name.<br> This field is optional in ADD and SET operation.</div>
     *
     * @return self
     */
    public function setAgencyPersonName($agency_person_name)
    {

        if (is_null($agency_person_name)) {
            array_push($this->openAPINullablesSetToNull, 'agency_person_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_person_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['agency_person_name'] = $agency_person_name;

        return $this;
    }

    /**
     * Gets agency_prefecture_code
     *
     * @return \OpenAPI\Client\Model\AccountManagementServicePrefectureCode|null
     */
    public function getAgencyPrefectureCode()
    {
        return $this->container['agency_prefecture_code'];
    }

    /**
     * Sets agency_prefecture_code
     *
     * @param \OpenAPI\Client\Model\AccountManagementServicePrefectureCode|null $agency_prefecture_code agency_prefecture_code
     *
     * @return self
     */
    public function setAgencyPrefectureCode($agency_prefecture_code)
    {

        if (is_null($agency_prefecture_code)) {
            array_push($this->openAPINullablesSetToNull, 'agency_prefecture_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('agency_prefecture_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['agency_prefecture_code'] = $agency_prefecture_code;

        return $this;
    }

    /**
     * Gets auth_type
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceAuthType|null
     */
    public function getAuthType()
    {
        return $this->container['auth_type'];
    }

    /**
     * Sets auth_type
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceAuthType|null $auth_type auth_type
     *
     * @return self
     */
    public function setAuthType($auth_type)
    {

        if (is_null($auth_type)) {
            array_push($this->openAPINullablesSetToNull, 'auth_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auth_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['auth_type'] = $auth_type;

        return $this;
    }

    /**
     * Gets auto_tagging_enabled
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceAutoTaggingEnabled|null
     */
    public function getAutoTaggingEnabled()
    {
        return $this->container['auto_tagging_enabled'];
    }

    /**
     * Sets auto_tagging_enabled
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceAutoTaggingEnabled|null $auto_tagging_enabled auto_tagging_enabled
     *
     * @return self
     */
    public function setAutoTaggingEnabled($auto_tagging_enabled)
    {

        if (is_null($auto_tagging_enabled)) {
            array_push($this->openAPINullablesSetToNull, 'auto_tagging_enabled');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auto_tagging_enabled', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['auto_tagging_enabled'] = $auto_tagging_enabled;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceClient|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceClient|null $client client
     *
     * @return self
     */
    public function setClient($client)
    {

        if (is_null($client)) {
            array_push($this->openAPINullablesSetToNull, 'client');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets client_type
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceClientType|null
     */
    public function getClientType()
    {
        return $this->container['client_type'];
    }

    /**
     * Sets client_type
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceClientType|null $client_type client_type
     *
     * @return self
     */
    public function setClientType($client_type)
    {

        if (is_null($client_type)) {
            array_push($this->openAPINullablesSetToNull, 'client_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['client_type'] = $client_type;

        return $this;
    }

    /**
     * Gets contact_biz_id
     *
     * @return string|null
     */
    public function getContactBizId()
    {
        return $this->container['contact_biz_id'];
    }

    /**
     * Sets contact_biz_id
     *
     * @param string|null $contact_biz_id <div lang=\"ja\">アカウント管理者のYahoo! JAPANビジネスIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Contact Business ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>
     *
     * @return self
     */
    public function setContactBizId($contact_biz_id)
    {

        if (is_null($contact_biz_id)) {
            array_push($this->openAPINullablesSetToNull, 'contact_biz_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact_biz_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['contact_biz_id'] = $contact_biz_id;

        return $this;
    }

    /**
     * Gets delivery_status
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceDeliveryStatus|null
     */
    public function getDeliveryStatus()
    {
        return $this->container['delivery_status'];
    }

    /**
     * Sets delivery_status
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceDeliveryStatus|null $delivery_status delivery_status
     *
     * @return self
     */
    public function setDeliveryStatus($delivery_status)
    {

        if (is_null($delivery_status)) {
            array_push($this->openAPINullablesSetToNull, 'delivery_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('delivery_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['delivery_status'] = $delivery_status;

        return $this;
    }

    /**
     * Gets is_adult_account
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceIsAdultAccount|null
     */
    public function getIsAdultAccount()
    {
        return $this->container['is_adult_account'];
    }

    /**
     * Sets is_adult_account
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceIsAdultAccount|null $is_adult_account is_adult_account
     *
     * @return self
     */
    public function setIsAdultAccount($is_adult_account)
    {

        if (is_null($is_adult_account)) {
            array_push($this->openAPINullablesSetToNull, 'is_adult_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_adult_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_adult_account'] = $is_adult_account;

        return $this;
    }

    /**
     * Gets is_test_account
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceIsTestAccount|null
     */
    public function getIsTestAccount()
    {
        return $this->container['is_test_account'];
    }

    /**
     * Sets is_test_account
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceIsTestAccount|null $is_test_account is_test_account
     *
     * @return self
     */
    public function setIsTestAccount($is_test_account)
    {

        if (is_null($is_test_account)) {
            array_push($this->openAPINullablesSetToNull, 'is_test_account');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_test_account', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_test_account'] = $is_test_account;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\AccountManagementServiceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\AccountManagementServiceStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


