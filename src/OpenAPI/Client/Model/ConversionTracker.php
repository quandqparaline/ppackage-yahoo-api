<?php
/**
 * ConversionTracker
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConversionTracker Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;ConversionTrackerオブジェクトは、コンバージョン測定タグやタグごとのパフォーマンスデータなどのコンバージョントラッカー情報を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;ConversionTracker object shows ConversionTracker information such as ConversionTag and performance data by tag.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversionTracker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConversionTracker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'all_conversion_value' => 'string',
        'all_conversions' => 'int',
        'app_conversion' => '\OpenAPI\Client\Model\ConversionTrackerServiceAppConversion',
        'app_link_conversion' => '\OpenAPI\Client\Model\ConversionTrackerServiceAppLinkConversion',
        'category' => '\OpenAPI\Client\Model\ConversionTrackerServiceCategory',
        'conversion_counting_type' => '\OpenAPI\Client\Model\ConversionTrackerServiceConversionCountingType',
        'conversion_tracker_id' => 'int',
        'conversion_tracker_track_id' => 'int',
        'conversion_tracker_name' => 'string',
        'conversion_tracker_type' => '\OpenAPI\Client\Model\ConversionTrackerServiceConversionTrackerType',
        'conversion_value' => 'string',
        'conversions' => 'int',
        'exclude_from_bidding' => '\OpenAPI\Client\Model\ConversionTrackerServiceExcludeFromBidding',
        'measurement_period' => 'int',
        'most_recent_conversion_date' => 'string',
        'status' => '\OpenAPI\Client\Model\ConversionTrackerServiceStatus',
        'user_revenue_value' => 'string',
        'web_conversion' => '\OpenAPI\Client\Model\ConversionTrackerServiceWebConversion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'all_conversion_value' => null,
        'all_conversions' => 'int64',
        'app_conversion' => null,
        'app_link_conversion' => null,
        'category' => null,
        'conversion_counting_type' => null,
        'conversion_tracker_id' => 'int64',
        'conversion_tracker_track_id' => 'int64',
        'conversion_tracker_name' => null,
        'conversion_tracker_type' => null,
        'conversion_value' => null,
        'conversions' => 'int64',
        'exclude_from_bidding' => null,
        'measurement_period' => 'int32',
        'most_recent_conversion_date' => null,
        'status' => null,
        'user_revenue_value' => null,
        'web_conversion' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'all_conversion_value' => true,
		'all_conversions' => true,
		'app_conversion' => true,
		'app_link_conversion' => true,
		'category' => true,
		'conversion_counting_type' => true,
		'conversion_tracker_id' => true,
		'conversion_tracker_track_id' => true,
		'conversion_tracker_name' => true,
		'conversion_tracker_type' => true,
		'conversion_value' => true,
		'conversions' => true,
		'exclude_from_bidding' => true,
		'measurement_period' => true,
		'most_recent_conversion_date' => true,
		'status' => true,
		'user_revenue_value' => true,
		'web_conversion' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'all_conversion_value' => 'allConversionValue',
        'all_conversions' => 'allConversions',
        'app_conversion' => 'appConversion',
        'app_link_conversion' => 'appLinkConversion',
        'category' => 'category',
        'conversion_counting_type' => 'conversionCountingType',
        'conversion_tracker_id' => 'conversionTrackerId',
        'conversion_tracker_track_id' => 'conversionTrackerTrackId',
        'conversion_tracker_name' => 'conversionTrackerName',
        'conversion_tracker_type' => 'conversionTrackerType',
        'conversion_value' => 'conversionValue',
        'conversions' => 'conversions',
        'exclude_from_bidding' => 'excludeFromBidding',
        'measurement_period' => 'measurementPeriod',
        'most_recent_conversion_date' => 'mostRecentConversionDate',
        'status' => 'status',
        'user_revenue_value' => 'userRevenueValue',
        'web_conversion' => 'webConversion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'all_conversion_value' => 'setAllConversionValue',
        'all_conversions' => 'setAllConversions',
        'app_conversion' => 'setAppConversion',
        'app_link_conversion' => 'setAppLinkConversion',
        'category' => 'setCategory',
        'conversion_counting_type' => 'setConversionCountingType',
        'conversion_tracker_id' => 'setConversionTrackerId',
        'conversion_tracker_track_id' => 'setConversionTrackerTrackId',
        'conversion_tracker_name' => 'setConversionTrackerName',
        'conversion_tracker_type' => 'setConversionTrackerType',
        'conversion_value' => 'setConversionValue',
        'conversions' => 'setConversions',
        'exclude_from_bidding' => 'setExcludeFromBidding',
        'measurement_period' => 'setMeasurementPeriod',
        'most_recent_conversion_date' => 'setMostRecentConversionDate',
        'status' => 'setStatus',
        'user_revenue_value' => 'setUserRevenueValue',
        'web_conversion' => 'setWebConversion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'all_conversion_value' => 'getAllConversionValue',
        'all_conversions' => 'getAllConversions',
        'app_conversion' => 'getAppConversion',
        'app_link_conversion' => 'getAppLinkConversion',
        'category' => 'getCategory',
        'conversion_counting_type' => 'getConversionCountingType',
        'conversion_tracker_id' => 'getConversionTrackerId',
        'conversion_tracker_track_id' => 'getConversionTrackerTrackId',
        'conversion_tracker_name' => 'getConversionTrackerName',
        'conversion_tracker_type' => 'getConversionTrackerType',
        'conversion_value' => 'getConversionValue',
        'conversions' => 'getConversions',
        'exclude_from_bidding' => 'getExcludeFromBidding',
        'measurement_period' => 'getMeasurementPeriod',
        'most_recent_conversion_date' => 'getMostRecentConversionDate',
        'status' => 'getStatus',
        'user_revenue_value' => 'getUserRevenueValue',
        'web_conversion' => 'getWebConversion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('all_conversion_value', $data ?? [], null);
        $this->setIfExists('all_conversions', $data ?? [], null);
        $this->setIfExists('app_conversion', $data ?? [], null);
        $this->setIfExists('app_link_conversion', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('conversion_counting_type', $data ?? [], null);
        $this->setIfExists('conversion_tracker_id', $data ?? [], null);
        $this->setIfExists('conversion_tracker_track_id', $data ?? [], null);
        $this->setIfExists('conversion_tracker_name', $data ?? [], null);
        $this->setIfExists('conversion_tracker_type', $data ?? [], null);
        $this->setIfExists('conversion_value', $data ?? [], null);
        $this->setIfExists('conversions', $data ?? [], null);
        $this->setIfExists('exclude_from_bidding', $data ?? [], null);
        $this->setIfExists('measurement_period', $data ?? [], null);
        $this->setIfExists('most_recent_conversion_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('user_revenue_value', $data ?? [], null);
        $this->setIfExists('web_conversion', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets all_conversion_value
     *
     * @return string|null
     */
    public function getAllConversionValue()
    {
        return $this->container['all_conversion_value'];
    }

    /**
     * Sets all_conversion_value
     *
     * @param string|null $all_conversion_value <div lang=\"ja\">自動入札設定対象のコンバージョン値と、対象外のコンバージョン値の合計です。</div> <div lang=\"en\">Total value of conversions to be included to auto bidding and to be exluded from auto bidding.</div>
     *
     * @return self
     */
    public function setAllConversionValue($all_conversion_value)
    {

        if (is_null($all_conversion_value)) {
            array_push($this->openAPINullablesSetToNull, 'all_conversion_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_conversion_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['all_conversion_value'] = $all_conversion_value;

        return $this;
    }

    /**
     * Gets all_conversions
     *
     * @return int|null
     */
    public function getAllConversions()
    {
        return $this->container['all_conversions'];
    }

    /**
     * Sets all_conversions
     *
     * @param int|null $all_conversions <div lang=\"ja\">自動入札設定対象のコンバージョン数と、対象外のコンバージョン数の合計です。</div> <div lang=\"en\">Total number of conversions to be included to auto bidding and to be excluded from auto bidding.</div>
     *
     * @return self
     */
    public function setAllConversions($all_conversions)
    {

        if (is_null($all_conversions)) {
            array_push($this->openAPINullablesSetToNull, 'all_conversions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('all_conversions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['all_conversions'] = $all_conversions;

        return $this;
    }

    /**
     * Gets app_conversion
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceAppConversion|null
     */
    public function getAppConversion()
    {
        return $this->container['app_conversion'];
    }

    /**
     * Sets app_conversion
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceAppConversion|null $app_conversion app_conversion
     *
     * @return self
     */
    public function setAppConversion($app_conversion)
    {

        if (is_null($app_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'app_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_conversion'] = $app_conversion;

        return $this;
    }

    /**
     * Gets app_link_conversion
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceAppLinkConversion|null
     */
    public function getAppLinkConversion()
    {
        return $this->container['app_link_conversion'];
    }

    /**
     * Sets app_link_conversion
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceAppLinkConversion|null $app_link_conversion app_link_conversion
     *
     * @return self
     */
    public function setAppLinkConversion($app_link_conversion)
    {

        if (is_null($app_link_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'app_link_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_link_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['app_link_conversion'] = $app_link_conversion;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceCategory|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {

        if (is_null($category)) {
            array_push($this->openAPINullablesSetToNull, 'category');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets conversion_counting_type
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceConversionCountingType|null
     */
    public function getConversionCountingType()
    {
        return $this->container['conversion_counting_type'];
    }

    /**
     * Sets conversion_counting_type
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceConversionCountingType|null $conversion_counting_type conversion_counting_type
     *
     * @return self
     */
    public function setConversionCountingType($conversion_counting_type)
    {

        if (is_null($conversion_counting_type)) {
            array_push($this->openAPINullablesSetToNull, 'conversion_counting_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversion_counting_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversion_counting_type'] = $conversion_counting_type;

        return $this;
    }

    /**
     * Gets conversion_tracker_id
     *
     * @return int|null
     */
    public function getConversionTrackerId()
    {
        return $this->container['conversion_tracker_id'];
    }

    /**
     * Sets conversion_tracker_id
     *
     * @param int|null $conversion_tracker_id <div lang=\"ja\">コンバージョントラッカーのIDです。<br> このフィールドは、SET時に必須となります。</div> <div lang=\"en\">ConversionTracker ID.<br> This field is required in SET operation.</div>
     *
     * @return self
     */
    public function setConversionTrackerId($conversion_tracker_id)
    {

        if (is_null($conversion_tracker_id)) {
            array_push($this->openAPINullablesSetToNull, 'conversion_tracker_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversion_tracker_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversion_tracker_id'] = $conversion_tracker_id;

        return $this;
    }

    /**
     * Gets conversion_tracker_track_id
     *
     * @return int|null
     */
    public function getConversionTrackerTrackId()
    {
        return $this->container['conversion_tracker_track_id'];
    }

    /**
     * Sets conversion_tracker_track_id
     *
     * @param int|null $conversion_tracker_track_id <div lang=\"ja\">トラッキング用コンバージョントラッカーIDです。<br> ADD時、このフィールドは省略可能となります。※conversionTrackerTypeがAPP_LINK_CONVERSIONの場合は必須です。</div> <div lang=\"en\">ConversionTracker ID for tracking.<br> This field is optional in ADD operation. *If conversionTrackerType is APP_LINK_CONVERSION, this field is required.</div>
     *
     * @return self
     */
    public function setConversionTrackerTrackId($conversion_tracker_track_id)
    {

        if (is_null($conversion_tracker_track_id)) {
            array_push($this->openAPINullablesSetToNull, 'conversion_tracker_track_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversion_tracker_track_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversion_tracker_track_id'] = $conversion_tracker_track_id;

        return $this;
    }

    /**
     * Gets conversion_tracker_name
     *
     * @return string|null
     */
    public function getConversionTrackerName()
    {
        return $this->container['conversion_tracker_name'];
    }

    /**
     * Sets conversion_tracker_name
     *
     * @param string|null $conversion_tracker_name <div lang=\"ja\">コンバージョントラッカーの名称です。<br> このフィールドは、ADD時に必須となり、SET時に省略可能となります。</div> <div lang=\"en\">ConversionTracker Name.<br> This field is required in ADD operation, and is optional in SET operation.</div>
     *
     * @return self
     */
    public function setConversionTrackerName($conversion_tracker_name)
    {

        if (is_null($conversion_tracker_name)) {
            array_push($this->openAPINullablesSetToNull, 'conversion_tracker_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversion_tracker_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversion_tracker_name'] = $conversion_tracker_name;

        return $this;
    }

    /**
     * Gets conversion_tracker_type
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceConversionTrackerType|null
     */
    public function getConversionTrackerType()
    {
        return $this->container['conversion_tracker_type'];
    }

    /**
     * Sets conversion_tracker_type
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceConversionTrackerType|null $conversion_tracker_type conversion_tracker_type
     *
     * @return self
     */
    public function setConversionTrackerType($conversion_tracker_type)
    {

        if (is_null($conversion_tracker_type)) {
            array_push($this->openAPINullablesSetToNull, 'conversion_tracker_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversion_tracker_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversion_tracker_type'] = $conversion_tracker_type;

        return $this;
    }

    /**
     * Gets conversion_value
     *
     * @return string|null
     */
    public function getConversionValue()
    {
        return $this->container['conversion_value'];
    }

    /**
     * Sets conversion_value
     *
     * @param string|null $conversion_value <div lang=\"ja\">自動入札設定対象のコンバージョン値です。</div> <div lang=\"en\">Conversion value to be included to auto bidding.</div>
     *
     * @return self
     */
    public function setConversionValue($conversion_value)
    {

        if (is_null($conversion_value)) {
            array_push($this->openAPINullablesSetToNull, 'conversion_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversion_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversion_value'] = $conversion_value;

        return $this;
    }

    /**
     * Gets conversions
     *
     * @return int|null
     */
    public function getConversions()
    {
        return $this->container['conversions'];
    }

    /**
     * Sets conversions
     *
     * @param int|null $conversions <div lang=\"ja\">自動入札設定対象のコンバージョン数です。<br> ユニークコンバージョンか総コンバージョンかは、countingTypeに依存します。</div> <div lang=\"en\">Conversions which counts as included to Auto Bidding setting.<br> countingType specifies whether one-per-click or many-per-click.</div>
     *
     * @return self
     */
    public function setConversions($conversions)
    {

        if (is_null($conversions)) {
            array_push($this->openAPINullablesSetToNull, 'conversions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('conversions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['conversions'] = $conversions;

        return $this;
    }

    /**
     * Gets exclude_from_bidding
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceExcludeFromBidding|null
     */
    public function getExcludeFromBidding()
    {
        return $this->container['exclude_from_bidding'];
    }

    /**
     * Sets exclude_from_bidding
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceExcludeFromBidding|null $exclude_from_bidding exclude_from_bidding
     *
     * @return self
     */
    public function setExcludeFromBidding($exclude_from_bidding)
    {

        if (is_null($exclude_from_bidding)) {
            array_push($this->openAPINullablesSetToNull, 'exclude_from_bidding');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('exclude_from_bidding', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['exclude_from_bidding'] = $exclude_from_bidding;

        return $this;
    }

    /**
     * Gets measurement_period
     *
     * @return int|null
     */
    public function getMeasurementPeriod()
    {
        return $this->container['measurement_period'];
    }

    /**
     * Sets measurement_period
     *
     * @param int|null $measurement_period <div lang=\"ja\">コンバージョン計測期間です（単位：日)。<br> 7～90日間で設定可能です。<br>※アプリダウンロードの場合は30日間固定。<br> このフィールドは、ADDおよびSET時に省略可能となります。<br>※ADD時のデフォルト設定値は30となります。<br> ※conversionTrackerTypeがAPP_LINK_CONVERSIONの場合、ADDおよびSET時にappEventTypeがfirst_openの場合は30のみ指定可能となります。<br> appEventTypeはConversionTrackerService/getAppEventTypeで取得されるappEvent.appEventTypeで確認できます。</div> <div lang=\"en\">Counting period of conversoins (days).<br>It is available between 7 to 90 days<br> * For Mobile App Download, this period is fixed as 30 days.<br> This field is optional in ADD and SET operation.<br> * The default value in ADD operation will be 30.<br> * In ADD and SET operation, if conversionTrackerType is APP_LINK_CONVERSION and appEventType is first_open, Only 30 can be specified.<br> appEventType can be confirmed by appEvent.appEventType obtained by ConversionTrackerService/getAppEventType.</div>
     *
     * @return self
     */
    public function setMeasurementPeriod($measurement_period)
    {

        if (is_null($measurement_period)) {
            array_push($this->openAPINullablesSetToNull, 'measurement_period');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('measurement_period', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['measurement_period'] = $measurement_period;

        return $this;
    }

    /**
     * Gets most_recent_conversion_date
     *
     * @return string|null
     */
    public function getMostRecentConversionDate()
    {
        return $this->container['most_recent_conversion_date'];
    }

    /**
     * Sets most_recent_conversion_date
     *
     * @param string|null $most_recent_conversion_date <div lang=\"ja\">直近のコンバージョン発生日です。</div> <div lang=\"en\">The most latest date when conversion occured.</div>
     *
     * @return self
     */
    public function setMostRecentConversionDate($most_recent_conversion_date)
    {

        if (is_null($most_recent_conversion_date)) {
            array_push($this->openAPINullablesSetToNull, 'most_recent_conversion_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('most_recent_conversion_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['most_recent_conversion_date'] = $most_recent_conversion_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_revenue_value
     *
     * @return string|null
     */
    public function getUserRevenueValue()
    {
        return $this->container['user_revenue_value'];
    }

    /**
     * Sets user_revenue_value
     *
     * @param string|null $user_revenue_value <div lang=\"ja\">このコンバージョントラッカーに対するユーザー指定の収益値です。<br> 1コンバージョンあたりの売上金額が固定値の場合、その金額を設定することで、売上金額をレポートなどで確認できます。<br> ADDリクエスト時に未指定の場合、0が設定されます。<br> このフィールドは、ADD時およびSET時に省略可能となります。<br> ※conversionTrackerTypeがAPP_LINK_CONVERSIONの場合、ADDおよびSET時にappEventTypeがin_app_purchaseの場合は0のみ指定可能となります。<br> appEventTypeはConversionTrackerService/getAppEventTypeで取得されるappEvent.appEventTypeで確認できます。</div> <div lang=\"en\">The value of revenue of the conversion tracker specified by user.<br> When the sales revenue of 1 conversion is fixed value, you are able to review the total sales on reports by specifying the amount on this item.<br> If it is not specified on ADD request, the value &#34;0&#34; is set.<br> This field is optional in ADD and SET operation.<br> * In ADD and SET operation, if conversionTrackerType is APP_LINK_CONVERSION and appEventType is in_app_purchase, Only 0 can be specified.<br> appEventType can be confirmed by appEvent.appEventType obtained by ConversionTrackerService/getAppEventType.</div>
     *
     * @return self
     */
    public function setUserRevenueValue($user_revenue_value)
    {

        if (is_null($user_revenue_value)) {
            array_push($this->openAPINullablesSetToNull, 'user_revenue_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_revenue_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['user_revenue_value'] = $user_revenue_value;

        return $this;
    }

    /**
     * Gets web_conversion
     *
     * @return \OpenAPI\Client\Model\ConversionTrackerServiceWebConversion|null
     */
    public function getWebConversion()
    {
        return $this->container['web_conversion'];
    }

    /**
     * Sets web_conversion
     *
     * @param \OpenAPI\Client\Model\ConversionTrackerServiceWebConversion|null $web_conversion web_conversion
     *
     * @return self
     */
    public function setWebConversion($web_conversion)
    {

        if (is_null($web_conversion)) {
            array_push($this->openAPINullablesSetToNull, 'web_conversion');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('web_conversion', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['web_conversion'] = $web_conversion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


