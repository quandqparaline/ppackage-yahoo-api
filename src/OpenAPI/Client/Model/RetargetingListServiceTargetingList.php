<?php
/**
 * RetargetingListServiceTargetingList
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RetargetingListServiceTargetingList Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;RetargetingListServiceTargetingListは、リターゲティング情報（ターゲットリスト）を保持するオブジェクトです。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;RetargetingListServiceTargetingList is an object that holds retargeting information (target list).&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RetargetingListServiceTargetingList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RetargetingListServiceTargetingList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'closing_reason' => '\OpenAPI\Client\Model\RetargetingListServiceClosingReason',
        'default_target_list' => '\OpenAPI\Client\Model\RetargetingListServiceDefaultTargetList',
        'logical_target_list' => '\OpenAPI\Client\Model\RetargetingListServiceLogicalTargetList',
        'reach' => 'int',
        'reach_storage_span' => 'int',
        'reach_storage_status' => '\OpenAPI\Client\Model\RetargetingListServiceReachStorageStatus',
        'retargeting_account_status' => '\OpenAPI\Client\Model\RetargetingListServiceRetargetingAccountStatus',
        'rule_base_target_list' => '\OpenAPI\Client\Model\RetargetingListServiceRuleBaseTargetList',
        'target_list_description' => 'string',
        'target_list_id' => 'int',
        'target_list_name' => 'string',
        'target_list_owner' => '\OpenAPI\Client\Model\RetargetingListServiceTargetListOwner',
        'target_list_track_id' => 'int',
        'target_list_type' => '\OpenAPI\Client\Model\RetargetingListServiceTargetListType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'closing_reason' => null,
        'default_target_list' => null,
        'logical_target_list' => null,
        'reach' => 'int64',
        'reach_storage_span' => 'int64',
        'reach_storage_status' => null,
        'retargeting_account_status' => null,
        'rule_base_target_list' => null,
        'target_list_description' => null,
        'target_list_id' => 'int64',
        'target_list_name' => null,
        'target_list_owner' => null,
        'target_list_track_id' => 'int64',
        'target_list_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'closing_reason' => true,
		'default_target_list' => true,
		'logical_target_list' => true,
		'reach' => true,
		'reach_storage_span' => true,
		'reach_storage_status' => true,
		'retargeting_account_status' => true,
		'rule_base_target_list' => true,
		'target_list_description' => true,
		'target_list_id' => true,
		'target_list_name' => true,
		'target_list_owner' => true,
		'target_list_track_id' => true,
		'target_list_type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'closing_reason' => 'closingReason',
        'default_target_list' => 'defaultTargetList',
        'logical_target_list' => 'logicalTargetList',
        'reach' => 'reach',
        'reach_storage_span' => 'reachStorageSpan',
        'reach_storage_status' => 'reachStorageStatus',
        'retargeting_account_status' => 'retargetingAccountStatus',
        'rule_base_target_list' => 'ruleBaseTargetList',
        'target_list_description' => 'targetListDescription',
        'target_list_id' => 'targetListId',
        'target_list_name' => 'targetListName',
        'target_list_owner' => 'targetListOwner',
        'target_list_track_id' => 'targetListTrackId',
        'target_list_type' => 'targetListType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'closing_reason' => 'setClosingReason',
        'default_target_list' => 'setDefaultTargetList',
        'logical_target_list' => 'setLogicalTargetList',
        'reach' => 'setReach',
        'reach_storage_span' => 'setReachStorageSpan',
        'reach_storage_status' => 'setReachStorageStatus',
        'retargeting_account_status' => 'setRetargetingAccountStatus',
        'rule_base_target_list' => 'setRuleBaseTargetList',
        'target_list_description' => 'setTargetListDescription',
        'target_list_id' => 'setTargetListId',
        'target_list_name' => 'setTargetListName',
        'target_list_owner' => 'setTargetListOwner',
        'target_list_track_id' => 'setTargetListTrackId',
        'target_list_type' => 'setTargetListType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'closing_reason' => 'getClosingReason',
        'default_target_list' => 'getDefaultTargetList',
        'logical_target_list' => 'getLogicalTargetList',
        'reach' => 'getReach',
        'reach_storage_span' => 'getReachStorageSpan',
        'reach_storage_status' => 'getReachStorageStatus',
        'retargeting_account_status' => 'getRetargetingAccountStatus',
        'rule_base_target_list' => 'getRuleBaseTargetList',
        'target_list_description' => 'getTargetListDescription',
        'target_list_id' => 'getTargetListId',
        'target_list_name' => 'getTargetListName',
        'target_list_owner' => 'getTargetListOwner',
        'target_list_track_id' => 'getTargetListTrackId',
        'target_list_type' => 'getTargetListType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('closing_reason', $data ?? [], null);
        $this->setIfExists('default_target_list', $data ?? [], null);
        $this->setIfExists('logical_target_list', $data ?? [], null);
        $this->setIfExists('reach', $data ?? [], null);
        $this->setIfExists('reach_storage_span', $data ?? [], null);
        $this->setIfExists('reach_storage_status', $data ?? [], null);
        $this->setIfExists('retargeting_account_status', $data ?? [], null);
        $this->setIfExists('rule_base_target_list', $data ?? [], null);
        $this->setIfExists('target_list_description', $data ?? [], null);
        $this->setIfExists('target_list_id', $data ?? [], null);
        $this->setIfExists('target_list_name', $data ?? [], null);
        $this->setIfExists('target_list_owner', $data ?? [], null);
        $this->setIfExists('target_list_track_id', $data ?? [], null);
        $this->setIfExists('target_list_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。<br> このフィールドは、いずれの場合でも必須となります。</div> <div lang=\"en\">Account ID.<br>This field is required in any cases.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets closing_reason
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceClosingReason|null
     */
    public function getClosingReason()
    {
        return $this->container['closing_reason'];
    }

    /**
     * Sets closing_reason
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceClosingReason|null $closing_reason closing_reason
     *
     * @return self
     */
    public function setClosingReason($closing_reason)
    {

        if (is_null($closing_reason)) {
            array_push($this->openAPINullablesSetToNull, 'closing_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('closing_reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['closing_reason'] = $closing_reason;

        return $this;
    }

    /**
     * Gets default_target_list
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceDefaultTargetList|null
     */
    public function getDefaultTargetList()
    {
        return $this->container['default_target_list'];
    }

    /**
     * Sets default_target_list
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceDefaultTargetList|null $default_target_list default_target_list
     *
     * @return self
     */
    public function setDefaultTargetList($default_target_list)
    {

        if (is_null($default_target_list)) {
            array_push($this->openAPINullablesSetToNull, 'default_target_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('default_target_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['default_target_list'] = $default_target_list;

        return $this;
    }

    /**
     * Gets logical_target_list
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceLogicalTargetList|null
     */
    public function getLogicalTargetList()
    {
        return $this->container['logical_target_list'];
    }

    /**
     * Sets logical_target_list
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceLogicalTargetList|null $logical_target_list logical_target_list
     *
     * @return self
     */
    public function setLogicalTargetList($logical_target_list)
    {

        if (is_null($logical_target_list)) {
            array_push($this->openAPINullablesSetToNull, 'logical_target_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logical_target_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['logical_target_list'] = $logical_target_list;

        return $this;
    }

    /**
     * Gets reach
     *
     * @return int|null
     */
    public function getReach()
    {
        return $this->container['reach'];
    }

    /**
     * Sets reach
     *
     * @param int|null $reach <div lang=\"ja\">リストに蓄積されているユーザー数です。</div> <div lang=\"en\">Number of users stored to the list.</div>
     *
     * @return self
     */
    public function setReach($reach)
    {

        if (is_null($reach)) {
            array_push($this->openAPINullablesSetToNull, 'reach');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reach', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['reach'] = $reach;

        return $this;
    }

    /**
     * Gets reach_storage_span
     *
     * @return int|null
     */
    public function getReachStorageSpan()
    {
        return $this->container['reach_storage_span'];
    }

    /**
     * Sets reach_storage_span
     *
     * @param int|null $reach_storage_span <div lang=\"ja\">Cookieを保持する日数です。<br> SET時、このフィールドは省略可能となります。<br>LogicalTargetListの場合、SET時にこのフィールドは無視されます。<br> ※Default：180<br> ※1-540日まで設定可能です。</div> <div lang=\"en\">Days to hold Cookie.<br> This field is optional in SET operation.<br> For LogicalTargetList, this field will be ignored in SET operation.<br> *Default: 180<br> *Can set from 1-540 days.</div>
     *
     * @return self
     */
    public function setReachStorageSpan($reach_storage_span)
    {

        if (is_null($reach_storage_span)) {
            array_push($this->openAPINullablesSetToNull, 'reach_storage_span');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reach_storage_span', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['reach_storage_span'] = $reach_storage_span;

        return $this;
    }

    /**
     * Gets reach_storage_status
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceReachStorageStatus|null
     */
    public function getReachStorageStatus()
    {
        return $this->container['reach_storage_status'];
    }

    /**
     * Sets reach_storage_status
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceReachStorageStatus|null $reach_storage_status reach_storage_status
     *
     * @return self
     */
    public function setReachStorageStatus($reach_storage_status)
    {

        if (is_null($reach_storage_status)) {
            array_push($this->openAPINullablesSetToNull, 'reach_storage_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reach_storage_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['reach_storage_status'] = $reach_storage_status;

        return $this;
    }

    /**
     * Gets retargeting_account_status
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceRetargetingAccountStatus|null
     */
    public function getRetargetingAccountStatus()
    {
        return $this->container['retargeting_account_status'];
    }

    /**
     * Sets retargeting_account_status
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceRetargetingAccountStatus|null $retargeting_account_status retargeting_account_status
     *
     * @return self
     */
    public function setRetargetingAccountStatus($retargeting_account_status)
    {

        if (is_null($retargeting_account_status)) {
            array_push($this->openAPINullablesSetToNull, 'retargeting_account_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('retargeting_account_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['retargeting_account_status'] = $retargeting_account_status;

        return $this;
    }

    /**
     * Gets rule_base_target_list
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceRuleBaseTargetList|null
     */
    public function getRuleBaseTargetList()
    {
        return $this->container['rule_base_target_list'];
    }

    /**
     * Sets rule_base_target_list
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceRuleBaseTargetList|null $rule_base_target_list rule_base_target_list
     *
     * @return self
     */
    public function setRuleBaseTargetList($rule_base_target_list)
    {

        if (is_null($rule_base_target_list)) {
            array_push($this->openAPINullablesSetToNull, 'rule_base_target_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rule_base_target_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['rule_base_target_list'] = $rule_base_target_list;

        return $this;
    }

    /**
     * Gets target_list_description
     *
     * @return string|null
     */
    public function getTargetListDescription()
    {
        return $this->container['target_list_description'];
    }

    /**
     * Sets target_list_description
     *
     * @param string|null $target_list_description <div lang=\"ja\">ターゲットリストの説明です。<br> このフィールドは、いずれの場合でも省略可能となります。</div> <div lang=\"en\">Description of Target List.<br> This field is optional in any cases.</div>
     *
     * @return self
     */
    public function setTargetListDescription($target_list_description)
    {

        if (is_null($target_list_description)) {
            array_push($this->openAPINullablesSetToNull, 'target_list_description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_list_description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['target_list_description'] = $target_list_description;

        return $this;
    }

    /**
     * Gets target_list_id
     *
     * @return int|null
     */
    public function getTargetListId()
    {
        return $this->container['target_list_id'];
    }

    /**
     * Sets target_list_id
     *
     * @param int|null $target_list_id <div lang=\"ja\">ターゲットリストIDです。<br> SET時、このフィールドは必須となります。</div> <div lang=\"en\">Target List ID.<br> This field is required in SET operation.</div>
     *
     * @return self
     */
    public function setTargetListId($target_list_id)
    {

        if (is_null($target_list_id)) {
            array_push($this->openAPINullablesSetToNull, 'target_list_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_list_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['target_list_id'] = $target_list_id;

        return $this;
    }

    /**
     * Gets target_list_name
     *
     * @return string|null
     */
    public function getTargetListName()
    {
        return $this->container['target_list_name'];
    }

    /**
     * Sets target_list_name
     *
     * @param string|null $target_list_name <div lang=\"ja\">ターゲットリスト名です。<br> ADD時にこのフィールドは必須となり、SET時にこのフィールドは省略可能となります。</div> <div lang=\"en\">Target List name.<br> This field is required in ADD operation, and is optional in SET operation.</div>
     *
     * @return self
     */
    public function setTargetListName($target_list_name)
    {

        if (is_null($target_list_name)) {
            array_push($this->openAPINullablesSetToNull, 'target_list_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_list_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['target_list_name'] = $target_list_name;

        return $this;
    }

    /**
     * Gets target_list_owner
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceTargetListOwner|null
     */
    public function getTargetListOwner()
    {
        return $this->container['target_list_owner'];
    }

    /**
     * Sets target_list_owner
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceTargetListOwner|null $target_list_owner target_list_owner
     *
     * @return self
     */
    public function setTargetListOwner($target_list_owner)
    {

        if (is_null($target_list_owner)) {
            array_push($this->openAPINullablesSetToNull, 'target_list_owner');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_list_owner', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['target_list_owner'] = $target_list_owner;

        return $this;
    }

    /**
     * Gets target_list_track_id
     *
     * @return int|null
     */
    public function getTargetListTrackId()
    {
        return $this->container['target_list_track_id'];
    }

    /**
     * Sets target_list_track_id
     *
     * @param int|null $target_list_track_id <div lang=\"ja\">ターゲットリストのトラッキング用IDです。</div> <div lang=\"en\">Tracking ID of Target list.</div>
     *
     * @return self
     */
    public function setTargetListTrackId($target_list_track_id)
    {

        if (is_null($target_list_track_id)) {
            array_push($this->openAPINullablesSetToNull, 'target_list_track_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_list_track_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['target_list_track_id'] = $target_list_track_id;

        return $this;
    }

    /**
     * Gets target_list_type
     *
     * @return \OpenAPI\Client\Model\RetargetingListServiceTargetListType|null
     */
    public function getTargetListType()
    {
        return $this->container['target_list_type'];
    }

    /**
     * Sets target_list_type
     *
     * @param \OpenAPI\Client\Model\RetargetingListServiceTargetListType|null $target_list_type target_list_type
     *
     * @return self
     */
    public function setTargetListType($target_list_type)
    {

        if (is_null($target_list_type)) {
            array_push($this->openAPINullablesSetToNull, 'target_list_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_list_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['target_list_type'] = $target_list_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


