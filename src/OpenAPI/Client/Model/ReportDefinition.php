<?php
/**
 * ReportDefinition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReportDefinition Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;ReportDefinitionオブジェクトは、レポートの情報を表します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;ReportDefinition object describes report information.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ReportDefinition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReportDefinition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'complete_time' => 'string',
        'date_range' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportDateRange',
        'fields' => 'string[]',
        'filters' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportFilter[]',
        'report_compress_type' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportCompressType',
        'report_date_range_type' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportDateRangeType',
        'report_decimal_part_display_type' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportDecimalPartDisplayType',
        'report_download_encode' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportDownloadEncode',
        'report_download_format' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportDownloadFormat',
        'report_include_deleted' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportIncludeDeleted',
        'report_job_error_detail' => 'string',
        'report_job_id' => 'int',
        'report_job_status' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportJobStatus',
        'report_language' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportLanguage',
        'report_name' => 'string',
        'report_skip_column_header' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportSkipColumnHeader',
        'report_skip_report_summary' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportSkipReportSummary',
        'report_type' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportType',
        'request_time' => 'string',
        'sort_fields' => '\OpenAPI\Client\Model\ReportDefinitionServiceReportSortField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'complete_time' => null,
        'date_range' => null,
        'fields' => null,
        'filters' => null,
        'report_compress_type' => null,
        'report_date_range_type' => null,
        'report_decimal_part_display_type' => null,
        'report_download_encode' => null,
        'report_download_format' => null,
        'report_include_deleted' => null,
        'report_job_error_detail' => null,
        'report_job_id' => 'int64',
        'report_job_status' => null,
        'report_language' => null,
        'report_name' => null,
        'report_skip_column_header' => null,
        'report_skip_report_summary' => null,
        'report_type' => null,
        'request_time' => null,
        'sort_fields' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'complete_time' => true,
		'date_range' => true,
		'fields' => true,
		'filters' => true,
		'report_compress_type' => true,
		'report_date_range_type' => true,
		'report_decimal_part_display_type' => true,
		'report_download_encode' => true,
		'report_download_format' => true,
		'report_include_deleted' => true,
		'report_job_error_detail' => true,
		'report_job_id' => true,
		'report_job_status' => true,
		'report_language' => true,
		'report_name' => true,
		'report_skip_column_header' => true,
		'report_skip_report_summary' => true,
		'report_type' => true,
		'request_time' => true,
		'sort_fields' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'complete_time' => 'completeTime',
        'date_range' => 'dateRange',
        'fields' => 'fields',
        'filters' => 'filters',
        'report_compress_type' => 'reportCompressType',
        'report_date_range_type' => 'reportDateRangeType',
        'report_decimal_part_display_type' => 'reportDecimalPartDisplayType',
        'report_download_encode' => 'reportDownloadEncode',
        'report_download_format' => 'reportDownloadFormat',
        'report_include_deleted' => 'reportIncludeDeleted',
        'report_job_error_detail' => 'reportJobErrorDetail',
        'report_job_id' => 'reportJobId',
        'report_job_status' => 'reportJobStatus',
        'report_language' => 'reportLanguage',
        'report_name' => 'reportName',
        'report_skip_column_header' => 'reportSkipColumnHeader',
        'report_skip_report_summary' => 'reportSkipReportSummary',
        'report_type' => 'reportType',
        'request_time' => 'requestTime',
        'sort_fields' => 'sortFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'complete_time' => 'setCompleteTime',
        'date_range' => 'setDateRange',
        'fields' => 'setFields',
        'filters' => 'setFilters',
        'report_compress_type' => 'setReportCompressType',
        'report_date_range_type' => 'setReportDateRangeType',
        'report_decimal_part_display_type' => 'setReportDecimalPartDisplayType',
        'report_download_encode' => 'setReportDownloadEncode',
        'report_download_format' => 'setReportDownloadFormat',
        'report_include_deleted' => 'setReportIncludeDeleted',
        'report_job_error_detail' => 'setReportJobErrorDetail',
        'report_job_id' => 'setReportJobId',
        'report_job_status' => 'setReportJobStatus',
        'report_language' => 'setReportLanguage',
        'report_name' => 'setReportName',
        'report_skip_column_header' => 'setReportSkipColumnHeader',
        'report_skip_report_summary' => 'setReportSkipReportSummary',
        'report_type' => 'setReportType',
        'request_time' => 'setRequestTime',
        'sort_fields' => 'setSortFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'complete_time' => 'getCompleteTime',
        'date_range' => 'getDateRange',
        'fields' => 'getFields',
        'filters' => 'getFilters',
        'report_compress_type' => 'getReportCompressType',
        'report_date_range_type' => 'getReportDateRangeType',
        'report_decimal_part_display_type' => 'getReportDecimalPartDisplayType',
        'report_download_encode' => 'getReportDownloadEncode',
        'report_download_format' => 'getReportDownloadFormat',
        'report_include_deleted' => 'getReportIncludeDeleted',
        'report_job_error_detail' => 'getReportJobErrorDetail',
        'report_job_id' => 'getReportJobId',
        'report_job_status' => 'getReportJobStatus',
        'report_language' => 'getReportLanguage',
        'report_name' => 'getReportName',
        'report_skip_column_header' => 'getReportSkipColumnHeader',
        'report_skip_report_summary' => 'getReportSkipReportSummary',
        'report_type' => 'getReportType',
        'request_time' => 'getRequestTime',
        'sort_fields' => 'getSortFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('complete_time', $data ?? [], null);
        $this->setIfExists('date_range', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('filters', $data ?? [], null);
        $this->setIfExists('report_compress_type', $data ?? [], null);
        $this->setIfExists('report_date_range_type', $data ?? [], null);
        $this->setIfExists('report_decimal_part_display_type', $data ?? [], null);
        $this->setIfExists('report_download_encode', $data ?? [], null);
        $this->setIfExists('report_download_format', $data ?? [], null);
        $this->setIfExists('report_include_deleted', $data ?? [], null);
        $this->setIfExists('report_job_error_detail', $data ?? [], null);
        $this->setIfExists('report_job_id', $data ?? [], null);
        $this->setIfExists('report_job_status', $data ?? [], null);
        $this->setIfExists('report_language', $data ?? [], null);
        $this->setIfExists('report_name', $data ?? [], null);
        $this->setIfExists('report_skip_column_header', $data ?? [], null);
        $this->setIfExists('report_skip_report_summary', $data ?? [], null);
        $this->setIfExists('report_type', $data ?? [], null);
        $this->setIfExists('request_time', $data ?? [], null);
        $this->setIfExists('sort_fields', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['sort_fields']) && (count($this->container['sort_fields']) > 5)) {
            $invalidProperties[] = "invalid value for 'sort_fields', number of items must be less than or equal to 5.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets complete_time
     *
     * @return string|null
     */
    public function getCompleteTime()
    {
        return $this->container['complete_time'];
    }

    /**
     * Sets complete_time
     *
     * @param string|null $complete_time <div lang=\"ja\">ジョブの完了時刻です。<br> ※YYYY/MM/DD hh:mm:ss形式になります。<br> ※hhは24時間表記になります。</div> <div lang=\"en\">Completion time of Report Job request.<br> *Displays in YYYY/MM/DD hh:mm:ss form.<br> *hh will display in 24-hour time.</div>
     *
     * @return self
     */
    public function setCompleteTime($complete_time)
    {

        if (is_null($complete_time)) {
            array_push($this->openAPINullablesSetToNull, 'complete_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('complete_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['complete_time'] = $complete_time;

        return $this;
    }

    /**
     * Gets date_range
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportDateRange|null
     */
    public function getDateRange()
    {
        return $this->container['date_range'];
    }

    /**
     * Sets date_range
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportDateRange|null $date_range date_range
     *
     * @return self
     */
    public function setDateRange($date_range)
    {

        if (is_null($date_range)) {
            array_push($this->openAPINullablesSetToNull, 'date_range');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_range', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['date_range'] = $date_range;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string[]|null $fields <div lang=\"ja\">フィールド（レポートの出力項目名）です。<br> ADD時、このフィールドは必須となります。</div> <div lang=\"en\">Item name of the report.<br> Can appoint the value retrieved from getReportFields.<br> This field is required in ADD operation.</div>
     *
     * @return self
     */
    public function setFields($fields)
    {

        if (is_null($fields)) {
            array_push($this->openAPINullablesSetToNull, 'fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportFilter[]|null
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportFilter[]|null $filters filters
     *
     * @return self
     */
    public function setFilters($filters)
    {

        if (is_null($filters)) {
            array_push($this->openAPINullablesSetToNull, 'filters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('filters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets report_compress_type
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportCompressType|null
     */
    public function getReportCompressType()
    {
        return $this->container['report_compress_type'];
    }

    /**
     * Sets report_compress_type
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportCompressType|null $report_compress_type report_compress_type
     *
     * @return self
     */
    public function setReportCompressType($report_compress_type)
    {

        if (is_null($report_compress_type)) {
            array_push($this->openAPINullablesSetToNull, 'report_compress_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_compress_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_compress_type'] = $report_compress_type;

        return $this;
    }

    /**
     * Gets report_date_range_type
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportDateRangeType|null
     */
    public function getReportDateRangeType()
    {
        return $this->container['report_date_range_type'];
    }

    /**
     * Sets report_date_range_type
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportDateRangeType|null $report_date_range_type report_date_range_type
     *
     * @return self
     */
    public function setReportDateRangeType($report_date_range_type)
    {

        if (is_null($report_date_range_type)) {
            array_push($this->openAPINullablesSetToNull, 'report_date_range_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_date_range_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_date_range_type'] = $report_date_range_type;

        return $this;
    }

    /**
     * Gets report_decimal_part_display_type
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportDecimalPartDisplayType|null
     */
    public function getReportDecimalPartDisplayType()
    {
        return $this->container['report_decimal_part_display_type'];
    }

    /**
     * Sets report_decimal_part_display_type
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportDecimalPartDisplayType|null $report_decimal_part_display_type report_decimal_part_display_type
     *
     * @return self
     */
    public function setReportDecimalPartDisplayType($report_decimal_part_display_type)
    {

        if (is_null($report_decimal_part_display_type)) {
            array_push($this->openAPINullablesSetToNull, 'report_decimal_part_display_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_decimal_part_display_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_decimal_part_display_type'] = $report_decimal_part_display_type;

        return $this;
    }

    /**
     * Gets report_download_encode
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportDownloadEncode|null
     */
    public function getReportDownloadEncode()
    {
        return $this->container['report_download_encode'];
    }

    /**
     * Sets report_download_encode
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportDownloadEncode|null $report_download_encode report_download_encode
     *
     * @return self
     */
    public function setReportDownloadEncode($report_download_encode)
    {

        if (is_null($report_download_encode)) {
            array_push($this->openAPINullablesSetToNull, 'report_download_encode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_download_encode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_download_encode'] = $report_download_encode;

        return $this;
    }

    /**
     * Gets report_download_format
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportDownloadFormat|null
     */
    public function getReportDownloadFormat()
    {
        return $this->container['report_download_format'];
    }

    /**
     * Sets report_download_format
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportDownloadFormat|null $report_download_format report_download_format
     *
     * @return self
     */
    public function setReportDownloadFormat($report_download_format)
    {

        if (is_null($report_download_format)) {
            array_push($this->openAPINullablesSetToNull, 'report_download_format');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_download_format', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_download_format'] = $report_download_format;

        return $this;
    }

    /**
     * Gets report_include_deleted
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportIncludeDeleted|null
     */
    public function getReportIncludeDeleted()
    {
        return $this->container['report_include_deleted'];
    }

    /**
     * Sets report_include_deleted
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportIncludeDeleted|null $report_include_deleted report_include_deleted
     *
     * @return self
     */
    public function setReportIncludeDeleted($report_include_deleted)
    {

        if (is_null($report_include_deleted)) {
            array_push($this->openAPINullablesSetToNull, 'report_include_deleted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_include_deleted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_include_deleted'] = $report_include_deleted;

        return $this;
    }

    /**
     * Gets report_job_error_detail
     *
     * @return string|null
     */
    public function getReportJobErrorDetail()
    {
        return $this->container['report_job_error_detail'];
    }

    /**
     * Sets report_job_error_detail
     *
     * @param string|null $report_job_error_detail <div lang=\"ja\">レポートジョブのエラー詳細です。</div> <div lang=\"en\">Error details of Report Job.</div>
     *
     * @return self
     */
    public function setReportJobErrorDetail($report_job_error_detail)
    {

        if (is_null($report_job_error_detail)) {
            array_push($this->openAPINullablesSetToNull, 'report_job_error_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_job_error_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_job_error_detail'] = $report_job_error_detail;

        return $this;
    }

    /**
     * Gets report_job_id
     *
     * @return int|null
     */
    public function getReportJobId()
    {
        return $this->container['report_job_id'];
    }

    /**
     * Sets report_job_id
     *
     * @param int|null $report_job_id <div lang=\"ja\">レポートジョブIDです。<br> REMOVE時、このフィールドは必須となります。</div> <div lang=\"en\">Report Job ID.<br> This field is required in REMOVE operation.</div>
     *
     * @return self
     */
    public function setReportJobId($report_job_id)
    {

        if (is_null($report_job_id)) {
            array_push($this->openAPINullablesSetToNull, 'report_job_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_job_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_job_id'] = $report_job_id;

        return $this;
    }

    /**
     * Gets report_job_status
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportJobStatus|null
     */
    public function getReportJobStatus()
    {
        return $this->container['report_job_status'];
    }

    /**
     * Sets report_job_status
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportJobStatus|null $report_job_status report_job_status
     *
     * @return self
     */
    public function setReportJobStatus($report_job_status)
    {

        if (is_null($report_job_status)) {
            array_push($this->openAPINullablesSetToNull, 'report_job_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_job_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_job_status'] = $report_job_status;

        return $this;
    }

    /**
     * Gets report_language
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportLanguage|null
     */
    public function getReportLanguage()
    {
        return $this->container['report_language'];
    }

    /**
     * Sets report_language
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportLanguage|null $report_language report_language
     *
     * @return self
     */
    public function setReportLanguage($report_language)
    {

        if (is_null($report_language)) {
            array_push($this->openAPINullablesSetToNull, 'report_language');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_language', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_language'] = $report_language;

        return $this;
    }

    /**
     * Gets report_name
     *
     * @return string|null
     */
    public function getReportName()
    {
        return $this->container['report_name'];
    }

    /**
     * Sets report_name
     *
     * @param string|null $report_name <div lang=\"ja\">レポート名称です。<br> ADD時、このフィールドは必須となります。</div> <div lang=\"en\">Name of the report.<br> This field is required in ADD operation.</div>
     *
     * @return self
     */
    public function setReportName($report_name)
    {

        if (is_null($report_name)) {
            array_push($this->openAPINullablesSetToNull, 'report_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_name'] = $report_name;

        return $this;
    }

    /**
     * Gets report_skip_column_header
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportSkipColumnHeader|null
     */
    public function getReportSkipColumnHeader()
    {
        return $this->container['report_skip_column_header'];
    }

    /**
     * Sets report_skip_column_header
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportSkipColumnHeader|null $report_skip_column_header report_skip_column_header
     *
     * @return self
     */
    public function setReportSkipColumnHeader($report_skip_column_header)
    {

        if (is_null($report_skip_column_header)) {
            array_push($this->openAPINullablesSetToNull, 'report_skip_column_header');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_skip_column_header', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_skip_column_header'] = $report_skip_column_header;

        return $this;
    }

    /**
     * Gets report_skip_report_summary
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportSkipReportSummary|null
     */
    public function getReportSkipReportSummary()
    {
        return $this->container['report_skip_report_summary'];
    }

    /**
     * Sets report_skip_report_summary
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportSkipReportSummary|null $report_skip_report_summary report_skip_report_summary
     *
     * @return self
     */
    public function setReportSkipReportSummary($report_skip_report_summary)
    {

        if (is_null($report_skip_report_summary)) {
            array_push($this->openAPINullablesSetToNull, 'report_skip_report_summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_skip_report_summary', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_skip_report_summary'] = $report_skip_report_summary;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportType|null
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportType|null $report_type report_type
     *
     * @return self
     */
    public function setReportType($report_type)
    {

        if (is_null($report_type)) {
            array_push($this->openAPINullablesSetToNull, 'report_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('report_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['report_type'] = $report_type;

        return $this;
    }

    /**
     * Gets request_time
     *
     * @return string|null
     */
    public function getRequestTime()
    {
        return $this->container['request_time'];
    }

    /**
     * Sets request_time
     *
     * @param string|null $request_time <div lang=\"ja\">ジョブの起動時刻です。<br> ※YYYY/MM/DD hh:mm:ss形式になります。<br> ※hhは24時間表記になります。</div> <div lang=\"en\">Start time of Report Job request.<br> *Displays in YYYY/MM/DD hh:mm:ss form.<br> *hh will display in 24-hour time.</div>
     *
     * @return self
     */
    public function setRequestTime($request_time)
    {

        if (is_null($request_time)) {
            array_push($this->openAPINullablesSetToNull, 'request_time');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('request_time', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['request_time'] = $request_time;

        return $this;
    }

    /**
     * Gets sort_fields
     *
     * @return \OpenAPI\Client\Model\ReportDefinitionServiceReportSortField[]|null
     */
    public function getSortFields()
    {
        return $this->container['sort_fields'];
    }

    /**
     * Sets sort_fields
     *
     * @param \OpenAPI\Client\Model\ReportDefinitionServiceReportSortField[]|null $sort_fields sort_fields
     *
     * @return self
     */
    public function setSortFields($sort_fields)
    {

        if (!is_null($sort_fields) && (count($sort_fields) > 5)) {
            throw new \InvalidArgumentException('invalid value for $sort_fields when calling ReportDefinition., number of items must be less than or equal to 5.');
        }

        if (is_null($sort_fields)) {
            array_push($this->openAPINullablesSetToNull, 'sort_fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sort_fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['sort_fields'] = $sort_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


