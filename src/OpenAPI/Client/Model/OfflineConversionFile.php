<?php
/**
 * OfflineConversionFile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OfflineConversionFile Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;オフラインコンバージョンデータをアップロードする処理内容を格納します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;This object contains contents of offline conversion information for upload.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OfflineConversionFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OfflineConversionFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'upload_id' => 'int',
        'upload_file_name' => 'string',
        'upload_type' => '\OpenAPI\Client\Model\OfflineConversionServiceUploadType',
        'uploaded_date' => 'string',
        'upload_source_type' => '\OpenAPI\Client\Model\OfflineConversionServiceUploadSourceType',
        'process_status' => '\OpenAPI\Client\Model\OfflineConversionServiceProcessStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'upload_id' => 'int64',
        'upload_file_name' => null,
        'upload_type' => null,
        'uploaded_date' => null,
        'upload_source_type' => null,
        'process_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'upload_id' => true,
		'upload_file_name' => true,
		'upload_type' => true,
		'uploaded_date' => true,
		'upload_source_type' => true,
		'process_status' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'upload_id' => 'uploadId',
        'upload_file_name' => 'uploadFileName',
        'upload_type' => 'uploadType',
        'uploaded_date' => 'uploadedDate',
        'upload_source_type' => 'uploadSourceType',
        'process_status' => 'processStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'upload_id' => 'setUploadId',
        'upload_file_name' => 'setUploadFileName',
        'upload_type' => 'setUploadType',
        'uploaded_date' => 'setUploadedDate',
        'upload_source_type' => 'setUploadSourceType',
        'process_status' => 'setProcessStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'upload_id' => 'getUploadId',
        'upload_file_name' => 'getUploadFileName',
        'upload_type' => 'getUploadType',
        'uploaded_date' => 'getUploadedDate',
        'upload_source_type' => 'getUploadSourceType',
        'process_status' => 'getProcessStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('upload_id', $data ?? [], null);
        $this->setIfExists('upload_file_name', $data ?? [], null);
        $this->setIfExists('upload_type', $data ?? [], null);
        $this->setIfExists('uploaded_date', $data ?? [], null);
        $this->setIfExists('upload_source_type', $data ?? [], null);
        $this->setIfExists('process_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。</div> <div lang=\"en\">Account ID.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets upload_id
     *
     * @return int|null
     */
    public function getUploadId()
    {
        return $this->container['upload_id'];
    }

    /**
     * Sets upload_id
     *
     * @param int|null $upload_id <div lang=\"ja\">アップロードIDです。</div> <div lang=\"en\">Upload ID.</div>
     *
     * @return self
     */
    public function setUploadId($upload_id)
    {

        if (is_null($upload_id)) {
            array_push($this->openAPINullablesSetToNull, 'upload_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upload_id'] = $upload_id;

        return $this;
    }

    /**
     * Gets upload_file_name
     *
     * @return string|null
     */
    public function getUploadFileName()
    {
        return $this->container['upload_file_name'];
    }

    /**
     * Sets upload_file_name
     *
     * @param string|null $upload_file_name <div lang=\"ja\">アップロードファイル名です。</div> <div lang=\"en\">Upload file name.</div>
     *
     * @return self
     */
    public function setUploadFileName($upload_file_name)
    {

        if (is_null($upload_file_name)) {
            array_push($this->openAPINullablesSetToNull, 'upload_file_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_file_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upload_file_name'] = $upload_file_name;

        return $this;
    }

    /**
     * Gets upload_type
     *
     * @return \OpenAPI\Client\Model\OfflineConversionServiceUploadType|null
     */
    public function getUploadType()
    {
        return $this->container['upload_type'];
    }

    /**
     * Sets upload_type
     *
     * @param \OpenAPI\Client\Model\OfflineConversionServiceUploadType|null $upload_type upload_type
     *
     * @return self
     */
    public function setUploadType($upload_type)
    {

        if (is_null($upload_type)) {
            array_push($this->openAPINullablesSetToNull, 'upload_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upload_type'] = $upload_type;

        return $this;
    }

    /**
     * Gets uploaded_date
     *
     * @return string|null
     */
    public function getUploadedDate()
    {
        return $this->container['uploaded_date'];
    }

    /**
     * Sets uploaded_date
     *
     * @param string|null $uploaded_date <div lang=\"ja\">アップロード日時です。</div> <div lang=\"en\">Upload date and time.</div>
     *
     * @return self
     */
    public function setUploadedDate($uploaded_date)
    {

        if (is_null($uploaded_date)) {
            array_push($this->openAPINullablesSetToNull, 'uploaded_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('uploaded_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['uploaded_date'] = $uploaded_date;

        return $this;
    }

    /**
     * Gets upload_source_type
     *
     * @return \OpenAPI\Client\Model\OfflineConversionServiceUploadSourceType|null
     */
    public function getUploadSourceType()
    {
        return $this->container['upload_source_type'];
    }

    /**
     * Sets upload_source_type
     *
     * @param \OpenAPI\Client\Model\OfflineConversionServiceUploadSourceType|null $upload_source_type upload_source_type
     *
     * @return self
     */
    public function setUploadSourceType($upload_source_type)
    {

        if (is_null($upload_source_type)) {
            array_push($this->openAPINullablesSetToNull, 'upload_source_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upload_source_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['upload_source_type'] = $upload_source_type;

        return $this;
    }

    /**
     * Gets process_status
     *
     * @return \OpenAPI\Client\Model\OfflineConversionServiceProcessStatus|null
     */
    public function getProcessStatus()
    {
        return $this->container['process_status'];
    }

    /**
     * Sets process_status
     *
     * @param \OpenAPI\Client\Model\OfflineConversionServiceProcessStatus|null $process_status process_status
     *
     * @return self
     */
    public function setProcessStatus($process_status)
    {

        if (is_null($process_status)) {
            array_push($this->openAPINullablesSetToNull, 'process_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('process_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['process_status'] = $process_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


