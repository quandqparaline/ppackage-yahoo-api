<?php
/**
 * Asset
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Yahoo!広告 検索広告 API リファレンス / Yahoo! JAPAN Ads Search Ads API Reference
 *
 * <div lang=\"ja\">Yahoo!広告 検索広告 APIのWebサービスについて説明します。</div> <div lang=\"en\">Search Ads API Web Services supported in Yahoo! JAPAN Ads API.</div> <div><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/design/v9/Route.yaml\">OpenAPI Specification</a></div> <div lang=\"ja\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/ja\">Best Practice</a></div> <div lang=\"en\"><a target=\"_blank\" href=\"https://github.com/yahoojp-marketing/ads-search-api-documents/blob/master/bestpractice/en\">Best Practice</a></div>
 *
 * The version of the OpenAPI document: v9
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Asset Class Doc Comment
 *
 * @category Class
 * @description &lt;div lang&#x3D;\&quot;ja\&quot;&gt;Assetオブジェクトは、アセット情報を格納します。&lt;/div&gt; &lt;div lang&#x3D;\&quot;en\&quot;&gt;Asset object contains the information of Asset.&lt;/div&gt;
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Asset implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Asset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'account_id' => 'int',
        'asset_id' => 'int',
        'asset_track_id' => 'int',
        'asset_data' => '\OpenAPI\Client\Model\AssetServiceAssetData',
        'approval_status' => '\OpenAPI\Client\Model\AssetServiceApprovalStatus',
        'disapproval_reason_codes' => 'string[]',
        'invalided_trademarks' => 'string[]',
        'trademark_status' => '\OpenAPI\Client\Model\AssetServiceTrademarkStatus',
        'custom_parameters' => '\OpenAPI\Client\Model\AssetServiceCustomParameters',
        'review_custom_parameters' => '\OpenAPI\Client\Model\AssetServiceCustomParameters',
        'smartphone_final_url' => 'string',
        'review_smartphone_final_url' => 'string',
        'final_url' => 'string',
        'review_final_url' => 'string',
        'tracking_url' => 'string',
        'review_tracking_url' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'account_id' => 'int64',
        'asset_id' => 'int64',
        'asset_track_id' => 'int64',
        'asset_data' => null,
        'approval_status' => null,
        'disapproval_reason_codes' => null,
        'invalided_trademarks' => null,
        'trademark_status' => null,
        'custom_parameters' => null,
        'review_custom_parameters' => null,
        'smartphone_final_url' => null,
        'review_smartphone_final_url' => null,
        'final_url' => null,
        'review_final_url' => null,
        'tracking_url' => null,
        'review_tracking_url' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'account_id' => true,
		'asset_id' => true,
		'asset_track_id' => true,
		'asset_data' => true,
		'approval_status' => true,
		'disapproval_reason_codes' => true,
		'invalided_trademarks' => true,
		'trademark_status' => true,
		'custom_parameters' => true,
		'review_custom_parameters' => true,
		'smartphone_final_url' => true,
		'review_smartphone_final_url' => true,
		'final_url' => true,
		'review_final_url' => true,
		'tracking_url' => true,
		'review_tracking_url' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_id' => 'accountId',
        'asset_id' => 'assetId',
        'asset_track_id' => 'assetTrackId',
        'asset_data' => 'assetData',
        'approval_status' => 'approvalStatus',
        'disapproval_reason_codes' => 'disapprovalReasonCodes',
        'invalided_trademarks' => 'invalidedTrademarks',
        'trademark_status' => 'trademarkStatus',
        'custom_parameters' => 'customParameters',
        'review_custom_parameters' => 'reviewCustomParameters',
        'smartphone_final_url' => 'smartphoneFinalUrl',
        'review_smartphone_final_url' => 'reviewSmartphoneFinalUrl',
        'final_url' => 'finalUrl',
        'review_final_url' => 'reviewFinalUrl',
        'tracking_url' => 'trackingUrl',
        'review_tracking_url' => 'reviewTrackingUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_id' => 'setAccountId',
        'asset_id' => 'setAssetId',
        'asset_track_id' => 'setAssetTrackId',
        'asset_data' => 'setAssetData',
        'approval_status' => 'setApprovalStatus',
        'disapproval_reason_codes' => 'setDisapprovalReasonCodes',
        'invalided_trademarks' => 'setInvalidedTrademarks',
        'trademark_status' => 'setTrademarkStatus',
        'custom_parameters' => 'setCustomParameters',
        'review_custom_parameters' => 'setReviewCustomParameters',
        'smartphone_final_url' => 'setSmartphoneFinalUrl',
        'review_smartphone_final_url' => 'setReviewSmartphoneFinalUrl',
        'final_url' => 'setFinalUrl',
        'review_final_url' => 'setReviewFinalUrl',
        'tracking_url' => 'setTrackingUrl',
        'review_tracking_url' => 'setReviewTrackingUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_id' => 'getAccountId',
        'asset_id' => 'getAssetId',
        'asset_track_id' => 'getAssetTrackId',
        'asset_data' => 'getAssetData',
        'approval_status' => 'getApprovalStatus',
        'disapproval_reason_codes' => 'getDisapprovalReasonCodes',
        'invalided_trademarks' => 'getInvalidedTrademarks',
        'trademark_status' => 'getTrademarkStatus',
        'custom_parameters' => 'getCustomParameters',
        'review_custom_parameters' => 'getReviewCustomParameters',
        'smartphone_final_url' => 'getSmartphoneFinalUrl',
        'review_smartphone_final_url' => 'getReviewSmartphoneFinalUrl',
        'final_url' => 'getFinalUrl',
        'review_final_url' => 'getReviewFinalUrl',
        'tracking_url' => 'getTrackingUrl',
        'review_tracking_url' => 'getReviewTrackingUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('asset_id', $data ?? [], null);
        $this->setIfExists('asset_track_id', $data ?? [], null);
        $this->setIfExists('asset_data', $data ?? [], null);
        $this->setIfExists('approval_status', $data ?? [], null);
        $this->setIfExists('disapproval_reason_codes', $data ?? [], null);
        $this->setIfExists('invalided_trademarks', $data ?? [], null);
        $this->setIfExists('trademark_status', $data ?? [], null);
        $this->setIfExists('custom_parameters', $data ?? [], null);
        $this->setIfExists('review_custom_parameters', $data ?? [], null);
        $this->setIfExists('smartphone_final_url', $data ?? [], null);
        $this->setIfExists('review_smartphone_final_url', $data ?? [], null);
        $this->setIfExists('final_url', $data ?? [], null);
        $this->setIfExists('review_final_url', $data ?? [], null);
        $this->setIfExists('tracking_url', $data ?? [], null);
        $this->setIfExists('review_tracking_url', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id <div lang=\"ja\">アカウントIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Account ID.<br> Although this field will be returned in the response, it will be ignored on input.</div>
     *
     * @return self
     */
    public function setAccountId($account_id)
    {

        if (is_null($account_id)) {
            array_push($this->openAPINullablesSetToNull, 'account_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('account_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return int|null
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param int|null $asset_id <div lang=\"ja\">アセットIDです。<br> このフィールドは、SETおよびREMOVE時に必須となり、ADD時に無視されます。</div> <div lang=\"en\">Asset ID.<br>This field is required in SET and REMOVE operation, and will be ignored in ADD operation.</div>
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {

        if (is_null($asset_id)) {
            array_push($this->openAPINullablesSetToNull, 'asset_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets asset_track_id
     *
     * @return int|null
     */
    public function getAssetTrackId()
    {
        return $this->container['asset_track_id'];
    }

    /**
     * Sets asset_track_id
     *
     * @param int|null $asset_track_id <div lang=\"ja\">トラッキング用アセットIDです。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Asset ID for tracking.<br> Although this field will be returned in the response, it will be ignored on input.</div>
     *
     * @return self
     */
    public function setAssetTrackId($asset_track_id)
    {

        if (is_null($asset_track_id)) {
            array_push($this->openAPINullablesSetToNull, 'asset_track_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_track_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['asset_track_id'] = $asset_track_id;

        return $this;
    }

    /**
     * Gets asset_data
     *
     * @return \OpenAPI\Client\Model\AssetServiceAssetData|null
     */
    public function getAssetData()
    {
        return $this->container['asset_data'];
    }

    /**
     * Sets asset_data
     *
     * @param \OpenAPI\Client\Model\AssetServiceAssetData|null $asset_data asset_data
     *
     * @return self
     */
    public function setAssetData($asset_data)
    {

        if (is_null($asset_data)) {
            array_push($this->openAPINullablesSetToNull, 'asset_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('asset_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['asset_data'] = $asset_data;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return \OpenAPI\Client\Model\AssetServiceApprovalStatus|null
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param \OpenAPI\Client\Model\AssetServiceApprovalStatus|null $approval_status approval_status
     *
     * @return self
     */
    public function setApprovalStatus($approval_status)
    {

        if (is_null($approval_status)) {
            array_push($this->openAPINullablesSetToNull, 'approval_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('approval_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets disapproval_reason_codes
     *
     * @return string[]|null
     */
    public function getDisapprovalReasonCodes()
    {
        return $this->container['disapproval_reason_codes'];
    }

    /**
     * Sets disapproval_reason_codes
     *
     * @param string[]|null $disapproval_reason_codes <div lang=\"ja\">審査否認理由です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。</div> <div lang=\"en\">Reject reason on editorial review.<br> Although this field will be returned in the response, it will be ignored on input.</div>
     *
     * @return self
     */
    public function setDisapprovalReasonCodes($disapproval_reason_codes)
    {

        if (is_null($disapproval_reason_codes)) {
            array_push($this->openAPINullablesSetToNull, 'disapproval_reason_codes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('disapproval_reason_codes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['disapproval_reason_codes'] = $disapproval_reason_codes;

        return $this;
    }

    /**
     * Gets invalided_trademarks
     *
     * @return string[]|null
     */
    public function getInvalidedTrademarks()
    {
        return $this->container['invalided_trademarks'];
    }

    /**
     * Sets invalided_trademarks
     *
     * @param string[]|null $invalided_trademarks <div lang=\"ja\">制限された商標です。<br> このフィールドは、レスポンスの際に返却されますが、リクエストの際には無視されます。 </div> <div lang=\"en\">Invalided trademarks.<br> Although this field will be returned in the response, it will be ignored on input.</div>
     *
     * @return self
     */
    public function setInvalidedTrademarks($invalided_trademarks)
    {

        if (is_null($invalided_trademarks)) {
            array_push($this->openAPINullablesSetToNull, 'invalided_trademarks');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invalided_trademarks', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['invalided_trademarks'] = $invalided_trademarks;

        return $this;
    }

    /**
     * Gets trademark_status
     *
     * @return \OpenAPI\Client\Model\AssetServiceTrademarkStatus|null
     */
    public function getTrademarkStatus()
    {
        return $this->container['trademark_status'];
    }

    /**
     * Sets trademark_status
     *
     * @param \OpenAPI\Client\Model\AssetServiceTrademarkStatus|null $trademark_status trademark_status
     *
     * @return self
     */
    public function setTrademarkStatus($trademark_status)
    {

        if (is_null($trademark_status)) {
            array_push($this->openAPINullablesSetToNull, 'trademark_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trademark_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['trademark_status'] = $trademark_status;

        return $this;
    }

    /**
     * Gets custom_parameters
     *
     * @return \OpenAPI\Client\Model\AssetServiceCustomParameters|null
     */
    public function getCustomParameters()
    {
        return $this->container['custom_parameters'];
    }

    /**
     * Sets custom_parameters
     *
     * @param \OpenAPI\Client\Model\AssetServiceCustomParameters|null $custom_parameters custom_parameters
     *
     * @return self
     */
    public function setCustomParameters($custom_parameters)
    {

        if (is_null($custom_parameters)) {
            array_push($this->openAPINullablesSetToNull, 'custom_parameters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_parameters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['custom_parameters'] = $custom_parameters;

        return $this;
    }

    /**
     * Gets review_custom_parameters
     *
     * @return \OpenAPI\Client\Model\AssetServiceCustomParameters|null
     */
    public function getReviewCustomParameters()
    {
        return $this->container['review_custom_parameters'];
    }

    /**
     * Sets review_custom_parameters
     *
     * @param \OpenAPI\Client\Model\AssetServiceCustomParameters|null $review_custom_parameters review_custom_parameters
     *
     * @return self
     */
    public function setReviewCustomParameters($review_custom_parameters)
    {

        if (is_null($review_custom_parameters)) {
            array_push($this->openAPINullablesSetToNull, 'review_custom_parameters');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_custom_parameters', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['review_custom_parameters'] = $review_custom_parameters;

        return $this;
    }

    /**
     * Gets smartphone_final_url
     *
     * @return string|null
     */
    public function getSmartphoneFinalUrl()
    {
        return $this->container['smartphone_final_url'];
    }

    /**
     * Sets smartphone_final_url
     *
     * @param string|null $smartphone_final_url <div lang=\"ja\">最終リンク先URL（スマートフォン）です。<br> ADDおよびSET時、このフィールドは省略可能となります。</div> <div lang=\"en\">Landing Page URL (Smartphone).<br> This field is optional in ADD and SET operation.</div>
     *
     * @return self
     */
    public function setSmartphoneFinalUrl($smartphone_final_url)
    {

        if (is_null($smartphone_final_url)) {
            array_push($this->openAPINullablesSetToNull, 'smartphone_final_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('smartphone_final_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['smartphone_final_url'] = $smartphone_final_url;

        return $this;
    }

    /**
     * Gets review_smartphone_final_url
     *
     * @return string|null
     */
    public function getReviewSmartphoneFinalUrl()
    {
        return $this->container['review_smartphone_final_url'];
    }

    /**
     * Sets review_smartphone_final_url
     *
     * @param string|null $review_smartphone_final_url <div lang=\"ja\">審査中の最終リンク先URL（スマートフォン）です。<br> このフィールドは、リクエストの際には無視されます。<br> 審査中の間のみ、レスポンスの際に返却されます。</div> <div lang=\"en\">Landing Page URL (Smartphone) on editorial review.<br> This field will be ignored on input.<br> It will be returned at the time of response only during the review.</div>
     *
     * @return self
     */
    public function setReviewSmartphoneFinalUrl($review_smartphone_final_url)
    {

        if (is_null($review_smartphone_final_url)) {
            array_push($this->openAPINullablesSetToNull, 'review_smartphone_final_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_smartphone_final_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['review_smartphone_final_url'] = $review_smartphone_final_url;

        return $this;
    }

    /**
     * Gets final_url
     *
     * @return string|null
     */
    public function getFinalUrl()
    {
        return $this->container['final_url'];
    }

    /**
     * Sets final_url
     *
     * @param string|null $final_url <div lang=\"ja\">最終リンク先URLです。<br> ADDおよびSET時、assetData.typeがQUICKLINKの場合は必須です。<br> assetData.typeがQUICKLINK以外の場合、リクエストの際に無視されます。</div> <div lang=\"en\">Landing Page URL.<br> This field is optional in ADD and SET operation.<br> In ADD and SET operation, If assetData.type is QUICKLINK, this field is required.<br> And will be ignored when assetData.type is the others.</div>
     *
     * @return self
     */
    public function setFinalUrl($final_url)
    {

        if (is_null($final_url)) {
            array_push($this->openAPINullablesSetToNull, 'final_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('final_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['final_url'] = $final_url;

        return $this;
    }

    /**
     * Gets review_final_url
     *
     * @return string|null
     */
    public function getReviewFinalUrl()
    {
        return $this->container['review_final_url'];
    }

    /**
     * Sets review_final_url
     *
     * @param string|null $review_final_url <div lang=\"ja\">審査中の最終リンク先URLです。<br> このフィールドは、リクエストの際には無視されます。<br> 審査中の間のみ、レスポンスの際に返却されます。</div> <div lang=\"en\">Landing Page URL on editorial review.<br> This field will be ignored on input.<br> It will be returned at the time of response only during the review.</div>
     *
     * @return self
     */
    public function setReviewFinalUrl($review_final_url)
    {

        if (is_null($review_final_url)) {
            array_push($this->openAPINullablesSetToNull, 'review_final_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_final_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['review_final_url'] = $review_final_url;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string|null
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string|null $tracking_url <div lang=\"ja\">トラッキングURLです。<br> ADDおよびSET時、このフィールドは省略可能となります。</div> <div lang=\"en\">Tracking URL.<br> This field is optional in ADD and SET operation.</div>
     *
     * @return self
     */
    public function setTrackingUrl($tracking_url)
    {

        if (is_null($tracking_url)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets review_tracking_url
     *
     * @return string|null
     */
    public function getReviewTrackingUrl()
    {
        return $this->container['review_tracking_url'];
    }

    /**
     * Sets review_tracking_url
     *
     * @param string|null $review_tracking_url <div lang=\"ja\">審査中のトラッキングURLです。<br> このフィールドは、リクエストの際には無視されます。<br> 審査中の間のみ、レスポンスの際に返却されます。</div> <div lang=\"en\">Tracking URL on editorial review.<br> This field will be ignored on input.<br> It will be returned at the time of response only during the review.</div>
     *
     * @return self
     */
    public function setReviewTrackingUrl($review_tracking_url)
    {

        if (is_null($review_tracking_url)) {
            array_push($this->openAPINullablesSetToNull, 'review_tracking_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('review_tracking_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['review_tracking_url'] = $review_tracking_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


